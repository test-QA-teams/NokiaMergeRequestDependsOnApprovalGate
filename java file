package com.employee.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.employee.exception.ResourceNotFound;
import com.employee.model.Employee;
import com.employee.repository.EmployeeRepository;
//cretae class for testing
@CrossOrigin(origins = "http://localhost:4200",allowedHeaders="*")
@RestControllerAdvice
@RequestMapping("/api/v1/")
public class EmployeeController {

	@Autowired
	private EmployeeRepository employeeRepository;

	@GetMapping("/employees")
	public List<Employee> listOfEmployee() {
		return employeeRepository.findAll();
	}
	@PostMapping(value="/employees")
	public Employee createEmployee(@RequestBody Employee employee) {
		return employeeRepository.save(employee);
	}
	@GetMapping(value="/employees/{id}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
		Employee employee = employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFound("Employee does not exist of id :"+id));
		return ResponseEntity.ok(employee);
	}
	@PutMapping(value="/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable Long id,@RequestBody Employee employeeDetails) {
		Employee employee = employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFound("Employee does not exist of id :"+id));
	    employee.setFirstName(employeeDetails.getFirstName());
	    employee.setLastName(employeeDetails.getLastName());
	    employee.setEmailId(employeeDetails.getEmailId());
	    Employee updatedEmployee = employeeRepository.save(employee);
		return ResponseEntity.ok(updatedEmployee);
	}
	@DeleteMapping(value="/employees/{id}")
	public ResponseEntity<Map<String, Boolean>> deleteEmployee(@PathVariable Long id) {
		Employee employee = employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFound("Employee does not exist of id :"+id));
	    Map<String, Boolean> response = new HashMap<String, Boolean>();
		employeeRepository.delete(employee);
		response.put("Deleted Successfully", Boolean.TRUE);
		return ResponseEntity.ok(response);
	}
}
